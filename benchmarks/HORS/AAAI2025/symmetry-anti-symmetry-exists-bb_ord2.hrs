%BEGING
S -> Exists35 ZeroBBBBB.
Exists35 p -> or (S34 p) (if (IsMaxBBBBB p) ff (Exists35 (SuccBBBBB p))).
S34 p -> and (not (and (S29 p tt) (S29 p ff))) (not (and (S33 p tt) (S33 p ff))).
S29 p x1 -> and (S28 p x1 tt) (S28 p x1 ff).
S28 p x1 x2 -> and (S27 p x1 x2 tt) (S27 p x1 x2 ff).
S27 p x1 x2 y1 -> and (S26 p x1 x2 y1 tt) (S26 p x1 x2 y1 ff).
S26 p x1 x2 y1 y2 -> imply (p x1 x2 y1 y2) (p y1 y2 x1 x2).
S33 p x1 -> and (S32 p x1 tt) (S32 p x1 ff).
S32 p x1 x2 -> and (S31 p x1 x2 tt) (S31 p x1 x2 ff).
S31 p x1 x2 y1 -> and (S30 p x1 x2 y1 tt) (S30 p x1 x2 y1 ff).
S30 p x1 x2 y1 y2 -> imply (and (p x1 x2 y1 y2) (p y1 y2 x1 x2)) (and (iff x1 y1) (iff x2 y2)).
ZeroBBBBB x1 x2 x3 x4 -> ff.
IsMaxBBBBB x -> and (IsMaxBBBB (x tt)) (IsMaxBBBB (x ff)).
SuccBBBBB x x1 x2 x3 x4 -> if (IsMaxBBBB (x ff)) (if x1 (SuccBBBB (x x1) x2 x3 x4) (ZeroBBBB x2 x3 x4)) (if x1 (x x1 x2 x3 x4) (SuccBBBB (x x1) x2 x3 x4)).
CompareBBBBB x y z lt eq gt -> if (IsMaxB z) eq (CompareBBBBB x y (SuccB z) lt (CompareBBBB (x z) (y z) ZeroB lt eq gt) gt).
ZeroBBBB x1 x2 x3 -> ff.
IsMaxBBBB x -> and (IsMaxBBB (x tt)) (IsMaxBBB (x ff)).
SuccBBBB x x1 x2 x3 -> if (IsMaxBBB (x ff)) (if x1 (SuccBBB (x x1) x2 x3) (ZeroBBB x2 x3)) (if x1 (x x1 x2 x3) (SuccBBB (x x1) x2 x3)).
CompareBBBB x y z lt eq gt -> if (IsMaxB z) eq (CompareBBBB x y (SuccB z) lt (CompareBBB (x z) (y z) ZeroB lt eq gt) gt).
ZeroBBB x1 x2 -> ff.
IsMaxBBB x -> and (IsMaxBB (x tt)) (IsMaxBB (x ff)).
SuccBBB x x1 x2 -> if (IsMaxBB (x ff)) (if x1 (SuccBB (x x1) x2) (ZeroBB x2)) (if x1 (x x1 x2) (SuccBB (x x1) x2)).
CompareBBB x y z lt eq gt -> if (IsMaxB z) eq (CompareBBB x y (SuccB z) lt (CompareBB (x z) (y z) ZeroB lt eq gt) gt).
ZeroBB x1 -> ff.
IsMaxBB x -> and (IsMaxB (x tt)) (IsMaxB (x ff)).
SuccBB x x1 -> if (IsMaxB (x ff)) (if x1 (SuccB (x x1)) ZeroB) (if x1 (x x1) (SuccB (x x1))).
CompareBB x y z lt eq gt -> if (IsMaxB z) eq (CompareBB x y (SuccB z) lt (CompareB (x z) (y z) lt eq gt) gt).
ZeroB -> ff.
IsMaxB x -> x.
SuccB x -> tt.
CompareB x y lt eq gt -> if x (if y eq gt) (if y lt eq).
%ENDG

%BEGINR
tt -> 0.
ff -> 0.
not -> 1.
and -> 2.
or -> 2.
imply -> 2.
iff -> 2.
xor -> 2.
if -> 3.
%ENDR

%BEGINATA
qT tt -> true.
qT ff -> false.
qT not -> (1,qF).
qT and -> (1,qT) /\ (2,qT).
qT or -> (1,qT) \/ (2,qT).
qT imply -> (1,qF) \/ (2,qT).
qT iff -> (1,qT) /\ (2,qT) \/ (1,qF) /\ (2,qF).
qT xor -> (1,qT) /\ (2,qF) \/ (1,qF) /\ (2,qT).
qT if -> (1,qT) /\ (2,qT) \/ (1,qF) /\ (3,qT).
qF tt -> false.
qF ff -> true.
qF not -> (1,qT).
qF and -> (1,qF) \/ (2,qF).
qF or -> (1,qF) /\ (2,qF).
qF imply -> (1,qT) /\ (2,qF).
qF iff -> (1,qT) /\ (2,qF) \/ (1,qF) /\ (2,qT).
qF xor -> (1,qT) /\ (2,qT) \/ (1,qF) /\ (2,qF).
qF if -> (1,qT) /\ (2,qF) \/ (1,qF) /\ (3,qF).
%ENDATA

